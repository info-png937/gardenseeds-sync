name: Sync GardenSeeds Pedidos

on:
  schedule:
    # Ejecutar cada 30 minutos, todos los d√≠as
    - cron: '*/30 * * * *'
  workflow_dispatch
  # Permitir ejecuci√≥n manual
  workflow_dispatch:
    inputs:
      date:
        description: 'Fecha a sincronizar (YYYY-MM-DD, vac√≠o = hoy y ayer)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  sync-pedidos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install playwright
        playwright install chromium
        playwright install-deps chromium
    
    - name: Extract pedidos HOY
      env:
        GARDENSEEDS_USER: ${{ secrets.GARDENSEEDS_USER }}
        GARDENSEEDS_PASS: ${{ secrets.GARDENSEEDS_PASS }}
      run: |
        TODAY=$(date +%Y-%m-%d)
        echo "üîç Extrayendo pedidos de HOY: $TODAY"
        python gardenseeds_extractor.py --date "$TODAY" --output pedidos_hoy.json
    
    - name: Extract pedidos AYER
      env:
        GARDENSEEDS_USER: ${{ secrets.GARDENSEEDS_USER }}
        GARDENSEEDS_PASS: ${{ secrets.GARDENSEEDS_PASS }}
      run: |
        YESTERDAY=$(date -d '1 day ago' +%Y-%m-%d)
        echo "üîç Extrayendo pedidos de AYER: $YESTERDAY"
        python gardenseeds_extractor.py --date "$YESTERDAY" --output pedidos_ayer.json
    
    - name: Merge results
      run: |
        echo "üì¶ Combinando resultados..."
        python - <<EOF
        import json
        from datetime import datetime
        
        # Leer ambos archivos
        with open('pedidos_hoy.json', 'r') as f:
            hoy = json.load(f)
        
        with open('pedidos_ayer.json', 'r') as f:
            ayer = json.load(f)
        
        # Combinar pedidos
        combined = {
            'success': True,
            'fechas': ['hoy', 'ayer'],
            'timestamp': datetime.now().isoformat(),
            'pedidos': [],
            'stats': {
                'total_pedidos': 0,
                'total_productos': 0
            }
        }
        
        # A√±adir pedidos de HOY
        if hoy.get('success') and hoy.get('pedidos'):
            for p in hoy['pedidos']:
                p['origen'] = 'hoy'
                combined['pedidos'].append(p)
        
        # A√±adir pedidos de AYER
        if ayer.get('success') and ayer.get('pedidos'):
            for p in ayer['pedidos']:
                p['origen'] = 'ayer'
                combined['pedidos'].append(p)
        
        # Stats
        combined['stats']['total_pedidos'] = len(combined['pedidos'])
        combined['stats']['total_productos'] = sum(
            len(p.get('productos', [])) for p in combined['pedidos']
        )
        
        # Guardar
        with open('pedidos_latest.json', 'w') as f:
            json.dump(combined, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Combinados: {combined['stats']['total_pedidos']} pedidos, {combined['stats']['total_productos']} productos")
        EOF
        
        # Copiar al hist√≥rico
        mkdir -p pedidos
        TODAY=$(date +%Y-%m-%d)
        cp pedidos_latest.json "pedidos/pedidos_$TODAY.json"
    
    - name: Check for changes
      id: check
      run: |
        if git diff --quiet pedidos_latest.json; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push
      if: steps.check.outputs.changed == 'true'
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git add pedidos_latest.json pedidos/
        git commit -m "Update pedidos $(date +%Y-%m-%d\ %H:%M)" || exit 0
        git push
    
    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pedidos-json
        path: |
          pedidos_latest.json
          pedidos/
        retention-days: 30
    
    - name: Summary
      if: always()
      run: |
        echo "## üìä Resumen" >> $GITHUB_STEP_SUMMARY
        echo "- **Fecha:** $(date +%Y-%m-%d\ %H:%M)" >> $GITHUB_STEP_SUMMARY
        echo "- **Estado:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        if [ -f pedidos_latest.json ]; then
          PEDIDOS=$(grep -o '"numero"' pedidos_latest.json | wc -l)
          echo "- **Pedidos:** $PEDIDOS" >> $GITHUB_STEP_SUMMARY
        fi
