name: Sync GardenSeeds Pedidos

on:
  schedule:
    # Ejecutar cada 30 minutos (‚ö†Ô∏è en UTC)
    - cron: '*/30 * * * *'
  # Permitir ejecuci√≥n manual con input opcional "date"
  workflow_dispatch:
    inputs:
      date:
        description: 'Fecha a sincronizar (YYYY-MM-DD, vac√≠o = hoy y ayer)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  sync-pedidos:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install playwright
        playwright install chromium
        playwright install-deps chromium

    # Resolver fechas seg√∫n input
    - name: Resolve dates
      id: dates
      run: |
        if [ -n "${{ github.event.inputs.date }}" ]; then
          echo "single=true" >> $GITHUB_OUTPUT
          echo "d1=${{ github.event.inputs.date }}" >> $GITHUB_OUTPUT
        else
          echo "single=false" >> $GITHUB_OUTPUT
          echo "d1=$(date +%F)" >> $GITHUB_OUTPUT
          echo "d2=$(date -d '1 day ago' +%F)" >> $GITHUB_OUTPUT
        fi

    - name: Extract pedidos (fecha √∫nica)
      if: steps.dates.outputs.single == 'true'
      env:
        GARDENSEEDS_USER: ${{ secrets.GARDENSEEDS_USER }}
        GARDENSEEDS_PASS: ${{ secrets.GARDENSEEDS_PASS }}
      run: |
        DATE="${{ steps.dates.outputs.d1 }}"
        echo "üîç Extrayendo pedidos de: $DATE"
        python gardenseeds_extractor.py --date "$DATE" --output "pedidos_${DATE}.json"
        cp "pedidos_${DATE}.json" pedidos_hoy.json
        jq -n --argfile p "pedidos_${DATE}.json" '$p' > pedidos_ayer.json

    - name: Extract pedidos HOY
      if: steps.dates.outputs.single != 'true'
      env:
        GARDENSEEDS_USER: ${{ secrets.GARDENSEEDS_USER }}
        GARDENSEEDS_PASS: ${{ secrets.GARDENSEEDS_PASS }}
      run: |
        TODAY="${{ steps.dates.outputs.d1 }}"
        echo "üîç Extrayendo pedidos de HOY: $TODAY"
        python gardenseeds_extractor.py --date "$TODAY" --output pedidos_hoy.json

    - name: Extract pedidos AYER
      if: steps.dates.outputs.single != 'true'
      env:
        GARDENSEEDS_USER: ${{ secrets.GARDENSEEDS_USER }}
        GARDENSEEDS_PASS: ${{ secrets.GARDENSEEDS_PASS }}
      run: |
        YESTERDAY="${{ steps.dates.outputs.d2 }}"
        echo "üîç Extrayendo pedidos de AYER: $YESTERDAY"
        python gardenseeds_extractor.py --date "$YESTERDAY" --output pedidos_ayer.json

    - name: Merge results
      run: |
        echo "üì¶ Combinando resultados..."
        python - <<'EOF'
        import json
        from datetime import datetime

        def read_or_empty(p):
          try:
            with open(p,'r') as f: return json.load(f)
          except Exception:
            return {"success": False, "pedidos": []}

        hoy  = read_or_empty('pedidos_hoy.json')
        ayer = read_or_empty('pedidos_ayer.json')

        combined = {
            'success': True,
            'fechas': ['hoy','ayer'],
            'timestamp': datetime.now().isoformat(),
            'pedidos': [],
            'stats': {'total_pedidos': 0, 'total_productos': 0}
        }

        if hoy.get('pedidos'):
            for p in hoy['pedidos']:
                p['origen'] = 'hoy'
                combined['pedidos'].append(p)

        if ayer.get('pedidos'):
            for p in ayer['pedidos']:
                p['origen'] = 'ayer'
                combined['pedidos'].append(p)

        combined['stats']['total_pedidos'] = len(combined['pedidos'])
        combined['stats']['total_productos'] = sum(len(p.get('productos', [])) for p in combined['pedidos'])

        with open('pedidos_latest.json','w') as f:
            json.dump(combined, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ Combinados: {combined['stats']['total_pedidos']} pedidos, {combined['stats']['total_productos']} productos")
        EOF

        mkdir -p pedidos
        TODAY=$(date +%F)
        cp pedidos_latest.json "pedidos/pedidos_${TODAY}.json"

    - name: Check for changes
      id: check
      run: |
        # Compara contra HEAD para saber si hubo cambios reales
        git fetch --depth=1 origin
        if git diff --quiet --exit-code HEAD -- pedidos_latest.json; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push
      if: steps.check.outputs.changed == 'true'
      env:
        GIT_AUTHOR_NAME: GitHub Actions Bot
        GIT_AUTHOR_EMAIL: actions@github.com
        GIT_COMMITTER_NAME: GitHub Actions Bot
        GIT_COMMITTER_EMAIL: actions@github.com
      run: |
        git add pedidos_latest.json pedidos/
        git commit -m "Update pedidos $(date +%F\ %H:%M)" || exit 0
        git push

    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pedidos-json
        path: |
          pedidos_latest.json
          pedidos/
        retention-days: 30

    - name: Summary
      if: always()
      run: |
        echo "## üìä Resumen" >> $GITHUB_STEP_SUMMARY
        echo "- **Fecha:** $(date +%F\ %H:%M)" >> $GITHUB_STEP_SUMMARY
        echo "- **Estado:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        if [ -f pedidos_latest.json ]; then
          PEDIDOS=$(grep -o '"numero"' pedidos_latest.json | wc -l || echo 0)
          echo "- **Pedidos:** $PEDIDOS" >> $GITHUB_STEP_SUMMARY
        fi

